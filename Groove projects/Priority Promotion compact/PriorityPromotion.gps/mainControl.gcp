solveParityGame();

function solveParityGame() {
    initializeStore;
    alap findDominion();
    deleteStore;
}

function findDominion() {
    setCurrentPriority();
    until (foundDominion) {
        attract();
        alap findOpenVertices;
        try findEscapeVertices;

        if (isGloballyClosed) {
            resetOtherRegionsColor();
            attract();
            alap setStrategy;
            returnDominionColor();
        } else if (isLocallyClosed) {
            mergeWithLowestEscapeRegion();
            resetLowerRegionsCleanupColor();
        } else {
            setCurrentPriority();
        }
    }
}

recipe setCurrentPriority() {
    setHighestRemainingPriority;
    try updateParity;
    cleanup; // Necessary at the end of findDominion function (in else statement), otherwise has no effect.
}

function attract() {
    try setCurrentPriorityRegionColor();
    alap {
        choice {
    	    attractCurrentParityColor();
    	} or {
    	    attractOtherParityColor();
    	}
    }
}

recipe mergeWithLowestEscapeRegion() {
    int attractedRegion;
    setLowestEscapePriority(out attractedRegion);
    alap setStrategyBeforeMerger(attractedRegion);
    updateAttractorRegionColor(attractedRegion);
}

recipe resetLowerRegionsCleanupColor() {
    resetLowerRegionsColor();
    cleanup;
}
